#
# Simple Arduino Makefile
#
# http://arduino.stackexchange.com/questions/21492/will-a-ino-arduino-sketch-compile-directly-on-gcc-avr
# Author: Nick Gammon
# Date: 18th March 2015



MAIN_SKETCH = generalTempReadandSend.ino

# may need to change these, possibly at the command line, e.g.:
# make F_CPU=1000000 MCU=atmega168p
F_CPU = 16000000
MCU = atmega328p




# where you installed the Arduino app
ARDUINO_DIR = ../libraries/Arduino/

# various programs
# requires a "sudo apt-get install gcc-avr" on debian
# requires a "sudo port install avr-gcc" (or maybe avr-libc) on mac osx
CC = avr-gcc
CXX = avr-g++
AR = avr-ar
OBJ_COPY = avr-objcopy


# Archive flags
ARFLAGS = rcs

# compile flags
GENERAL_FLAGS = -c -g -Os -Wall -ffunction-sections -fdata-sections \
				-mmcu=$(MCU) -DF_CPU=$(F_CPU)L -MMD -DUSB_VID=null -DUSB_PID=null -DARDUINO=106
CXXFLAGS = $(GENERAL_FLAGS) -fno-exceptions $(INCLUDE_FILES) $(patsubst %,-I%,$(EXTRA_DIRS))
CFLAGS  = $(GENERAL_FLAGS) $(INCLUDE_FILES) $(patsubst %,-I%,$(EXTRA_DIRS))

# location of include files
INCLUDE_FILES = "-I$(ARDUINO_DIR)hardware/arduino/avr/cores/arduino" \
			    "-I$(ARDUINO_DIR)hardware/arduino/avr/variants/standard" 

# library sources
LIBRARY_DIR = $(ARDUINO_DIR)hardware/arduino/avr/variants/standard

BUILD_NAME = $(MCU)-$$(($(F_CPU)/1000000))MHz
LIBNAME = libinocore$(BUILD_NAME).a

EXTRA_DIRS = $(ARDUINO_DIR)/hardware/arduino/avr/libraries/SPI \
			 $(wildcard ../libraries/*)

OBJDIR = $(LIBRARY_DIR)/$(BUILD_NAME)objs


CORE_C_FILES = avr-libc/malloc avr-libc/realloc WInterrupts hooks wiring \
	   wiring_analog wiring_digital wiring_pulse wiring_shift CDC
_CORE_C_OBJS = malloc.o realloc.o WInterrupts.o hooks.o wiring.o \
	   wiring_analog.o wiring_digital.o wiring_pulse.o wiring_shift.o 
_CORE_CXX_OBJS = CDC.o HardwareSerial.o HID.o IPAddress.o main.o new.o Print.o \
		   Stream.o Tone.o USBCore.o WMath.o WString.o
_CORE_OBJS = $(_CORE_C_OBJS) $(_CORE_CXX_OBJS)
#CORE_C_OBJS = $(patsubst %,$(OBJDIR)/%,$(_CORE_C_OBJS))
#CORE_CXX_OBJS = $(patsubst %,$(OBJDIR)/%,$(_CORE_CXX_OBJS)
CORE_OBJS = $(patsubst %,$(OBJDIR)/%,$(_CORE_OBJS))

_CXX_OBJS = RF24.o SPI.o DallasTemperature.o DHT.o 
CXX_OBJS = $(patsubst %,$(OBJDIR)/%,$(_CXX_OBJS))
HEADERS = SPI.h  RF24.h nRF24L01.h DallasTemperature.h OneWire.h DHT.h

VPATH = $(LIBRARY_DIR) $(LIBRARY_DIR)/avr-libc $(EXTRA_DIRS)

build: $(HEADERS)
	mkdir -p $(OBJDIR)
	$(MAKE) build_library
	#$(CPP) $(CPP_FLAGS) $(INCLUDE_FILES) $(MAIN_SKETCH) -o $(MAIN_SKETCH).o
	$(CXX) $(CXXFLAGS) $(INCLUDE_FILES) -x c++ -include Arduino.h $(MAIN_SKETCH) -o $(MAIN_SKETCH).o
	$(CC) -Os -Wl,--gc-sections -mmcu=$(MCU) -o $(MAIN_SKETCH).elf $(MAIN_SKETCH).o $(LIBRARY_DIR)/$(LIBNAME) -lm 
	$(OBJ_COPY) -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0 $(MAIN_SKETCH).elf $(MAIN_SKETCH).eep 
	$(OBJ_COPY) -O ihex -R .eeprom $(MAIN_SKETCH).elf $(MAIN_SKETCH).hex
	rm *.d *.o


build_library: $(CXX_OBJS) $(CORE_OBJS)
	$(AR) $(ARFLAGS) $(LIBRARY_DIR)/$(LIBNAME) $^

$(OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) $^ -o $@

$(OBJDIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) $^ -o $@

clean:
	rm -f $(OBJDIR)/*
	rm -f $(LIBRARY_DIR)/$(LIBNAME)
	rm *.d *.o


